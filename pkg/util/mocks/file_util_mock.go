// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	io "io"
	fs "io/fs"

	util "github.com/skuid/skuid-cli/pkg/util"
	mock "github.com/stretchr/testify/mock"
)

// FileUtil is an autogenerated mock type for the FileUtil type
type FileUtil struct {
	mock.Mock
}

type FileUtil_Expecter struct {
	mock *mock.Mock
}

func (_m *FileUtil) EXPECT() *FileUtil_Expecter {
	return &FileUtil_Expecter{mock: &_m.Mock}
}

// DirExists provides a mock function with given fields: fsys, path
func (_m *FileUtil) DirExists(fsys fs.FS, path string) (bool, error) {
	ret := _m.Called(fsys, path)

	if len(ret) == 0 {
		panic("no return value specified for DirExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(fs.FS, string) (bool, error)); ok {
		return rf(fsys, path)
	}
	if rf, ok := ret.Get(0).(func(fs.FS, string) bool); ok {
		r0 = rf(fsys, path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(fs.FS, string) error); ok {
		r1 = rf(fsys, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileUtil_DirExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DirExists'
type FileUtil_DirExists_Call struct {
	*mock.Call
}

// DirExists is a helper method to define mock.On call
//   - fsys fs.FS
//   - path string
func (_e *FileUtil_Expecter) DirExists(fsys interface{}, path interface{}) *FileUtil_DirExists_Call {
	return &FileUtil_DirExists_Call{Call: _e.mock.On("DirExists", fsys, path)}
}

func (_c *FileUtil_DirExists_Call) Run(run func(fsys fs.FS, path string)) *FileUtil_DirExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(fs.FS), args[1].(string))
	})
	return _c
}

func (_c *FileUtil_DirExists_Call) Return(_a0 bool, _a1 error) *FileUtil_DirExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileUtil_DirExists_Call) RunAndReturn(run func(fs.FS, string) (bool, error)) *FileUtil_DirExists_Call {
	_c.Call.Return(run)
	return _c
}

// FileExists provides a mock function with given fields: fsys, path
func (_m *FileUtil) FileExists(fsys fs.FS, path string) (bool, error) {
	ret := _m.Called(fsys, path)

	if len(ret) == 0 {
		panic("no return value specified for FileExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(fs.FS, string) (bool, error)); ok {
		return rf(fsys, path)
	}
	if rf, ok := ret.Get(0).(func(fs.FS, string) bool); ok {
		r0 = rf(fsys, path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(fs.FS, string) error); ok {
		r1 = rf(fsys, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileUtil_FileExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileExists'
type FileUtil_FileExists_Call struct {
	*mock.Call
}

// FileExists is a helper method to define mock.On call
//   - fsys fs.FS
//   - path string
func (_e *FileUtil_Expecter) FileExists(fsys interface{}, path interface{}) *FileUtil_FileExists_Call {
	return &FileUtil_FileExists_Call{Call: _e.mock.On("FileExists", fsys, path)}
}

func (_c *FileUtil_FileExists_Call) Run(run func(fsys fs.FS, path string)) *FileUtil_FileExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(fs.FS), args[1].(string))
	})
	return _c
}

func (_c *FileUtil_FileExists_Call) Return(_a0 bool, _a1 error) *FileUtil_FileExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileUtil_FileExists_Call) RunAndReturn(run func(fs.FS, string) (bool, error)) *FileUtil_FileExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewZipWriter provides a mock function with given fields: w
func (_m *FileUtil) NewZipWriter(w io.Writer) util.ZipWriter {
	ret := _m.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for NewZipWriter")
	}

	var r0 util.ZipWriter
	if rf, ok := ret.Get(0).(func(io.Writer) util.ZipWriter); ok {
		r0 = rf(w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(util.ZipWriter)
		}
	}

	return r0
}

// FileUtil_NewZipWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewZipWriter'
type FileUtil_NewZipWriter_Call struct {
	*mock.Call
}

// NewZipWriter is a helper method to define mock.On call
//   - w io.Writer
func (_e *FileUtil_Expecter) NewZipWriter(w interface{}) *FileUtil_NewZipWriter_Call {
	return &FileUtil_NewZipWriter_Call{Call: _e.mock.On("NewZipWriter", w)}
}

func (_c *FileUtil_NewZipWriter_Call) Run(run func(w io.Writer)) *FileUtil_NewZipWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *FileUtil_NewZipWriter_Call) Return(_a0 util.ZipWriter) *FileUtil_NewZipWriter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileUtil_NewZipWriter_Call) RunAndReturn(run func(io.Writer) util.ZipWriter) *FileUtil_NewZipWriter_Call {
	_c.Call.Return(run)
	return _c
}

// PathExists provides a mock function with given fields: fsys, path
func (_m *FileUtil) PathExists(fsys fs.FS, path string) (bool, error) {
	ret := _m.Called(fsys, path)

	if len(ret) == 0 {
		panic("no return value specified for PathExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(fs.FS, string) (bool, error)); ok {
		return rf(fsys, path)
	}
	if rf, ok := ret.Get(0).(func(fs.FS, string) bool); ok {
		r0 = rf(fsys, path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(fs.FS, string) error); ok {
		r1 = rf(fsys, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileUtil_PathExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PathExists'
type FileUtil_PathExists_Call struct {
	*mock.Call
}

// PathExists is a helper method to define mock.On call
//   - fsys fs.FS
//   - path string
func (_e *FileUtil_Expecter) PathExists(fsys interface{}, path interface{}) *FileUtil_PathExists_Call {
	return &FileUtil_PathExists_Call{Call: _e.mock.On("PathExists", fsys, path)}
}

func (_c *FileUtil_PathExists_Call) Run(run func(fsys fs.FS, path string)) *FileUtil_PathExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(fs.FS), args[1].(string))
	})
	return _c
}

func (_c *FileUtil_PathExists_Call) Return(_a0 bool, _a1 error) *FileUtil_PathExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileUtil_PathExists_Call) RunAndReturn(run func(fs.FS, string) (bool, error)) *FileUtil_PathExists_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFile provides a mock function with given fields: fsys, name
func (_m *FileUtil) ReadFile(fsys fs.FS, name string) ([]byte, error) {
	ret := _m.Called(fsys, name)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(fs.FS, string) ([]byte, error)); ok {
		return rf(fsys, name)
	}
	if rf, ok := ret.Get(0).(func(fs.FS, string) []byte); ok {
		r0 = rf(fsys, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(fs.FS, string) error); ok {
		r1 = rf(fsys, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileUtil_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type FileUtil_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - fsys fs.FS
//   - name string
func (_e *FileUtil_Expecter) ReadFile(fsys interface{}, name interface{}) *FileUtil_ReadFile_Call {
	return &FileUtil_ReadFile_Call{Call: _e.mock.On("ReadFile", fsys, name)}
}

func (_c *FileUtil_ReadFile_Call) Run(run func(fsys fs.FS, name string)) *FileUtil_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(fs.FS), args[1].(string))
	})
	return _c
}

func (_c *FileUtil_ReadFile_Call) Return(_a0 []byte, _a1 error) *FileUtil_ReadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileUtil_ReadFile_Call) RunAndReturn(run func(fs.FS, string) ([]byte, error)) *FileUtil_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// WalkDir provides a mock function with given fields: fsys, root, fn
func (_m *FileUtil) WalkDir(fsys fs.FS, root string, fn fs.WalkDirFunc) error {
	ret := _m.Called(fsys, root, fn)

	if len(ret) == 0 {
		panic("no return value specified for WalkDir")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(fs.FS, string, fs.WalkDirFunc) error); ok {
		r0 = rf(fsys, root, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileUtil_WalkDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WalkDir'
type FileUtil_WalkDir_Call struct {
	*mock.Call
}

// WalkDir is a helper method to define mock.On call
//   - fsys fs.FS
//   - root string
//   - fn fs.WalkDirFunc
func (_e *FileUtil_Expecter) WalkDir(fsys interface{}, root interface{}, fn interface{}) *FileUtil_WalkDir_Call {
	return &FileUtil_WalkDir_Call{Call: _e.mock.On("WalkDir", fsys, root, fn)}
}

func (_c *FileUtil_WalkDir_Call) Run(run func(fsys fs.FS, root string, fn fs.WalkDirFunc)) *FileUtil_WalkDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(fs.FS), args[1].(string), args[2].(fs.WalkDirFunc))
	})
	return _c
}

func (_c *FileUtil_WalkDir_Call) Return(_a0 error) *FileUtil_WalkDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileUtil_WalkDir_Call) RunAndReturn(run func(fs.FS, string, fs.WalkDirFunc) error) *FileUtil_WalkDir_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileUtil creates a new instance of FileUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileUtil(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileUtil {
	mock := &FileUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
