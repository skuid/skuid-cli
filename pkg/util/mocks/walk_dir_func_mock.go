// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// WalkDirFunc is an autogenerated mock type for the WalkDirFunc type
type WalkDirFunc struct {
	mock.Mock
}

type WalkDirFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *WalkDirFunc) EXPECT() *WalkDirFunc_Expecter {
	return &WalkDirFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: path, d, err
func (_m *WalkDirFunc) Execute(path string, d fs.DirEntry, err error) error {
	ret := _m.Called(path, d, err)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, fs.DirEntry, error) error); ok {
		r0 = rf(path, d, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WalkDirFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type WalkDirFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - path string
//   - d fs.DirEntry
//   - err error
func (_e *WalkDirFunc_Expecter) Execute(path interface{}, d interface{}, err interface{}) *WalkDirFunc_Execute_Call {
	return &WalkDirFunc_Execute_Call{Call: _e.mock.On("Execute", path, d, err)}
}

func (_c *WalkDirFunc_Execute_Call) Run(run func(path string, d fs.DirEntry, err error)) *WalkDirFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(fs.DirEntry), args[2].(error))
	})
	return _c
}

func (_c *WalkDirFunc_Execute_Call) Return(_a0 error) *WalkDirFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WalkDirFunc_Execute_Call) RunAndReturn(run func(string, fs.DirEntry, error) error) *WalkDirFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewWalkDirFunc creates a new instance of WalkDirFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWalkDirFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *WalkDirFunc {
	mock := &WalkDirFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
