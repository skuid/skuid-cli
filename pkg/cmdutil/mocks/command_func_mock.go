// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	cmdutil "github.com/skuid/skuid-cli/pkg/cmdutil"
	cobra "github.com/spf13/cobra"

	mock "github.com/stretchr/testify/mock"
)

// CommandFunc is an autogenerated mock type for the CommandFunc type
type CommandFunc struct {
	mock.Mock
}

type CommandFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *CommandFunc) EXPECT() *CommandFunc_Expecter {
	return &CommandFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: factory, cmd, args
func (_m *CommandFunc) Execute(factory *cmdutil.Factory, cmd *cobra.Command, args []string) error {
	ret := _m.Called(factory, cmd, args)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*cmdutil.Factory, *cobra.Command, []string) error); ok {
		r0 = rf(factory, cmd, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommandFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type CommandFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - factory *cmdutil.Factory
//   - cmd *cobra.Command
//   - args []string
func (_e *CommandFunc_Expecter) Execute(factory interface{}, cmd interface{}, args interface{}) *CommandFunc_Execute_Call {
	return &CommandFunc_Execute_Call{Call: _e.mock.On("Execute", factory, cmd, args)}
}

func (_c *CommandFunc_Execute_Call) Run(run func(factory *cmdutil.Factory, cmd *cobra.Command, args []string)) *CommandFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cmdutil.Factory), args[1].(*cobra.Command), args[2].([]string))
	})
	return _c
}

func (_c *CommandFunc_Execute_Call) Return(_a0 error) *CommandFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CommandFunc_Execute_Call) RunAndReturn(run func(*cmdutil.Factory, *cobra.Command, []string) error) *CommandFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewCommandFunc creates a new instance of CommandFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommandFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommandFunc {
	mock := &CommandFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
