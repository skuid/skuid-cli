// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// LogInformer is an autogenerated mock type for the LogInformer type
type LogInformer struct {
	mock.Mock
}

type LogInformer_Expecter struct {
	mock *mock.Mock
}

func (_m *LogInformer) EXPECT() *LogInformer_Expecter {
	return &LogInformer_Expecter{mock: &_m.Mock}
}

// SetDiagnostic provides a mock function with given fields:
func (_m *LogInformer) SetDiagnostic() {
	_m.Called()
}

// LogInformer_SetDiagnostic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDiagnostic'
type LogInformer_SetDiagnostic_Call struct {
	*mock.Call
}

// SetDiagnostic is a helper method to define mock.On call
func (_e *LogInformer_Expecter) SetDiagnostic() *LogInformer_SetDiagnostic_Call {
	return &LogInformer_SetDiagnostic_Call{Call: _e.mock.On("SetDiagnostic")}
}

func (_c *LogInformer_SetDiagnostic_Call) Run(run func()) *LogInformer_SetDiagnostic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogInformer_SetDiagnostic_Call) Return() *LogInformer_SetDiagnostic_Call {
	_c.Call.Return()
	return _c
}

func (_c *LogInformer_SetDiagnostic_Call) RunAndReturn(run func()) *LogInformer_SetDiagnostic_Call {
	_c.Call.Return(run)
	return _c
}

// SetFileLogging provides a mock function with given fields: loggingDirectory
func (_m *LogInformer) SetFileLogging(loggingDirectory string) error {
	ret := _m.Called(loggingDirectory)

	if len(ret) == 0 {
		panic("no return value specified for SetFileLogging")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(loggingDirectory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogInformer_SetFileLogging_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFileLogging'
type LogInformer_SetFileLogging_Call struct {
	*mock.Call
}

// SetFileLogging is a helper method to define mock.On call
//   - loggingDirectory string
func (_e *LogInformer_Expecter) SetFileLogging(loggingDirectory interface{}) *LogInformer_SetFileLogging_Call {
	return &LogInformer_SetFileLogging_Call{Call: _e.mock.On("SetFileLogging", loggingDirectory)}
}

func (_c *LogInformer_SetFileLogging_Call) Run(run func(loggingDirectory string)) *LogInformer_SetFileLogging_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LogInformer_SetFileLogging_Call) Return(err error) *LogInformer_SetFileLogging_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LogInformer_SetFileLogging_Call) RunAndReturn(run func(string) error) *LogInformer_SetFileLogging_Call {
	_c.Call.Return(run)
	return _c
}

// SetTrace provides a mock function with given fields:
func (_m *LogInformer) SetTrace() {
	_m.Called()
}

// LogInformer_SetTrace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTrace'
type LogInformer_SetTrace_Call struct {
	*mock.Call
}

// SetTrace is a helper method to define mock.On call
func (_e *LogInformer_Expecter) SetTrace() *LogInformer_SetTrace_Call {
	return &LogInformer_SetTrace_Call{Call: _e.mock.On("SetTrace")}
}

func (_c *LogInformer_SetTrace_Call) Run(run func()) *LogInformer_SetTrace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogInformer_SetTrace_Call) Return() *LogInformer_SetTrace_Call {
	_c.Call.Return()
	return _c
}

func (_c *LogInformer_SetTrace_Call) RunAndReturn(run func()) *LogInformer_SetTrace_Call {
	_c.Call.Return(run)
	return _c
}

// SetVerbose provides a mock function with given fields:
func (_m *LogInformer) SetVerbose() {
	_m.Called()
}

// LogInformer_SetVerbose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetVerbose'
type LogInformer_SetVerbose_Call struct {
	*mock.Call
}

// SetVerbose is a helper method to define mock.On call
func (_e *LogInformer_Expecter) SetVerbose() *LogInformer_SetVerbose_Call {
	return &LogInformer_SetVerbose_Call{Call: _e.mock.On("SetVerbose")}
}

func (_c *LogInformer_SetVerbose_Call) Run(run func()) *LogInformer_SetVerbose_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogInformer_SetVerbose_Call) Return() *LogInformer_SetVerbose_Call {
	_c.Call.Return()
	return _c
}

func (_c *LogInformer_SetVerbose_Call) RunAndReturn(run func()) *LogInformer_SetVerbose_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogInformer creates a new instance of LogInformer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogInformer(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogInformer {
	mock := &LogInformer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
